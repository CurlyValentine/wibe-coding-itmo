#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
"""

import os
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADD_TASK, SET_PRIORITY, SET_REMINDER = range(4)

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
PRIORITIES = ['üî¥ –í—ã—Å–æ–∫–∏–π', 'üü° –°—Ä–µ–¥–Ω–∏–π', 'üü¢ –ù–∏–∑–∫–∏–π']

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'tasks_data.json'


class TaskManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self, data_file: str = DATA_FILE):
        self.data_file = data_file
        self.tasks: Dict[int, Dict] = self._load_tasks()
    
    def _load_tasks(self) -> Dict[int, Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                    return {int(k): v for k, v in data.items()}
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def _save_tasks(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.tasks, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_user_tasks(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.tasks:
            self.tasks[user_id] = {'tasks': []}
        return self.tasks[user_id]['tasks']
    
    def add_task(self, user_id: int, text: str, priority: str = 'üü° –°—Ä–µ–¥–Ω–∏–π', 
                 reminder: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if user_id not in self.tasks:
            self.tasks[user_id] = {'tasks': []}
        
        task = {
            'id': len(self.tasks[user_id]['tasks']) + 1,
            'text': text,
            'priority': priority,
            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'completed': False,
            'reminder': reminder
        }
        
        self.tasks[user_id]['tasks'].append(task)
        self._save_tasks()
        return task
    
    def complete_task(self, user_id: int, task_id: int) -> bool:
        """–û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        tasks = self.get_user_tasks(user_id)
        for task in tasks:
            if task['id'] == task_id:
                task['completed'] = True
                self._save_tasks()
                return True
        return False
    
    def delete_task(self, user_id: int, task_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        tasks = self.get_user_tasks(user_id)
        initial_length = len(tasks)
        self.tasks[user_id]['tasks'] = [t for t in tasks if t['id'] != task_id]
        
        if len(self.tasks[user_id]['tasks']) < initial_length:
            self._save_tasks()
            return True
        return False
    
    def get_tasks_by_priority(self, user_id: int) -> Dict[str, List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        tasks = self.get_user_tasks(user_id)
        categorized = {p: [] for p in PRIORITIES}
        
        for task in tasks:
            if not task['completed']:
                priority = task.get('priority', 'üü° –°—Ä–µ–¥–Ω–∏–π')
                if priority in categorized:
                    categorized[priority].append(task)
        
        return categorized


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
task_manager = TaskManager()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.effective_user
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        f"üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
        f"üéØ –û—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º\n"
        f"‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        f"/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n"
        f"/complete - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        f"/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        f"/help - –ü–æ–º–æ—â—å\n"
        f"/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    
    await update.message.reply_text(welcome_message)
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–±–æ—Ç–æ–º\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/complete - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á:*\n"
        "üî¥ –í—ã—Å–æ–∫–∏–π - –°—Ä–æ—á–Ω—ã–µ –∏ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "üü° –°—Ä–µ–¥–Ω–∏–π - –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "üü¢ –ù–∏–∑–∫–∏–π - –ó–∞–¥–∞—á–∏ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n"
        "(–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
    )
    return ADD_TASK


async def add_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    context.user_data['task_text'] = update.message.text
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    keyboard = [[priority] for priority in PRIORITIES]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=reply_markup
    )
    return SET_PRIORITY


async def set_priority(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    priority = update.message.text
    
    if priority not in PRIORITIES:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
        return SET_PRIORITY
    
    context.user_data['task_priority'] = priority
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    keyboard = [
        ['–ß–µ—Ä–µ–∑ 1 —á–∞—Å', '–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞'],
        ['–ó–∞–≤—Ç—Ä–∞', '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'],
        ['–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚è∞ –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–¥–∞—á–µ?",
        reply_markup=reply_markup
    )
    return SET_REMINDER


async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    reminder_text = update.message.text
    user_id = update.effective_user.id
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_time = None
    if reminder_text == '–ß–µ—Ä–µ–∑ 1 —á–∞—Å':
        reminder_time = (datetime.now() + timedelta(hours=1)).strftime('%Y-%m-%d %H:%M:%S')
    elif reminder_text == '–ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞':
        reminder_time = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')
    elif reminder_text == '–ó–∞–≤—Ç—Ä–∞':
        reminder_time = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')
    elif reminder_text == '–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é':
        reminder_time = (datetime.now() + timedelta(weeks=1)).strftime('%Y-%m-%d %H:%M:%S')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = task_manager.add_task(
        user_id=user_id,
        text=context.user_data['task_text'],
        priority=context.user_data['task_priority'],
        reminder=reminder_time
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
    message = (
        f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìù {task['text']}\n"
        f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task['priority']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task['created_at']}\n"
    )
    
    if reminder_time:
        message += f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_time}"
    
    await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    user_id = update.effective_user.id
    tasks_by_priority = task_manager.get_tasks_by_priority(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    total_tasks = sum(len(tasks) for tasks in tasks_by_priority.values())
    
    if total_tasks == 0:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    message = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"
    
    for priority in PRIORITIES:
        tasks = tasks_by_priority[priority]
        if tasks:
            message += f"*{priority}*\n"
            for task in tasks:
                status = "‚úÖ" if task['completed'] else "‚èπ"
                message += f"{status} #{task['id']}: {task['text']}\n"
                if task.get('reminder'):
                    message += f"   ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task['reminder']}\n"
            message += "\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    all_tasks = task_manager.get_user_tasks(user_id)
    completed_tasks = [t for t in all_tasks if t['completed']]
    
    if completed_tasks:
        message += "*‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:*\n"
        for task in completed_tasks[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            message += f"‚úÖ #{task['id']}: {task['text']}\n"
    
    await update.message.reply_text(message, parse_mode='Markdown')


async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    user_id = update.effective_user.id
    tasks = task_manager.get_user_tasks(user_id)
    active_tasks = [t for t in tasks if not t['completed']]
    
    if not active_tasks:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    message = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n\n"
    for task in active_tasks:
        message += f"#{task['id']}: {task['text']} ({task['priority']})\n"
    
    await update.message.reply_text(message)
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['awaiting_complete'] = True


async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"""
    user_id = update.effective_user.id
    tasks = task_manager.get_user_tasks(user_id)
    
    if not tasks:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    message = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for task in tasks:
        status = "‚úÖ" if task['completed'] else "‚èπ"
        message += f"{status} #{task['id']}: {task['text']} ({task['priority']})\n"
    
    await update.message.reply_text(message)
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['awaiting_delete'] = True


async def handle_task_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ
    try:
        task_id = int(text)
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏."
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if context.user_data.get('awaiting_complete'):
        if task_manager.complete_task(user_id, task_id):
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
        context.user_data.pop('awaiting_complete', None)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    elif context.user_data.get('awaiting_delete'):
        if task_manager.delete_task(user_id, task_id):
            await update.message.reply_text(
                f"üóë –ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞!"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
        context.user_data.pop('awaiting_delete', None)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ /help"
            )
    except Exception as e:
        logger.error(f"Error in error_handler: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    add_task_conv = ConversationHandler(
        entry_points=[CommandHandler('add', add_task_start)],
        states={
            ADD_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_text)],
            SET_PRIORITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_priority)],
            SET_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(add_task_conv)
    application.add_handler(CommandHandler('list', list_tasks))
    application.add_handler(CommandHandler('complete', complete_task))
    application.add_handler(CommandHandler('delete', delete_task))
    application.add_handler(CommandHandler('cancel', cancel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_action)
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

